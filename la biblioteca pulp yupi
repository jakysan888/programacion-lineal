{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Veremos un ejemplo de usar la biblioteca pulp para resolver problemas de programación lineal.El problema es: maximizar $2x+y$ sujeto a las restricciones:\n",
    "$4x+y\\leq 150$ ,                   \n",
    "$2x-3y\\leq -40$ ,   \n",
    "$x,y\\geq 0$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pulp import *\n",
    "x=LpVariable(\"x\",0)\n",
    "y=LpVariable(\"y\",0)\n",
    "prob=LpProblem(\"ejmeplo\",LpMaximize)\n",
    "prob += 4*x+y <= 150\n",
    "prob += 2*x-3*y <= -40\n",
    "prob+=2*x+y\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ejmeplo:\n",
       "MAXIMIZE\n",
       "2*x + 1*y + 0\n",
       "SUBJECT TO\n",
       "_C1: 4 x + y <= 150\n",
       "\n",
       "_C2: 2 x - 3 y <= -40\n",
       "\n",
       "VARIABLES\n",
       "x Continuous\n",
       "y Continuous"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prob"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.0, 150.0)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "status=prob.solve()\n",
    "value(x), value(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(150.0, 'Optimal')"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "value(prob.objective),LpStatus[prob.status]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Ahora resolveremos los ejercicios del lunes 27 de enero del 2020 con Fer bebé"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. mazimizar $2x+2y$ sujeto a:\n",
    "\n",
    "    $x.y\\geq 0$\n",
    "    \n",
    "    $2x+y\\leq 4$\n",
    "    \n",
    "    $-x-2y\\geq -5$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pulp import *\n",
    "x=LpVariable(\"x\",0)\n",
    "y=LpVariable(\"y\",0)\n",
    "prob=LpProblem(\"ejemplo\",LpMaximize)\n",
    "prob += 2*x+y <= 4\n",
    "prob += -x-2*y >= -5\n",
    "prob+=2*x+2*y\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1.0, 2.0)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "status=prob.solve()\n",
    "value(x), value(y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "   1. Minimizar $-5x-y$ sujeto a:\n",
    "\n",
    "    $x.y\\geq 0$\n",
    "    \n",
    "    $3x+y\\leq 7$\n",
    "    \n",
    "    $-x-y\\geq -3$\n",
    "    \n",
    "    $-x-2y\\geq -5$\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pulp import *\n",
    "x=LpVariable(\"x\",0)\n",
    "y=LpVariable(\"y\",0)\n",
    "prob=LpProblem(\"ejemplo\",LpMinimize)\n",
    "prob += 3*x+y <= 7\n",
    "prob += -x-y >= -3\n",
    "prob += -x-2*y >= -5\n",
    "prob+=-5*x-y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2.3333333, 0.0)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "status=prob.solve()\n",
    "value(x), value(y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. minimizar $x+4y$ sujeto a:\n",
    "\n",
    "    $x.y\\geq 0$\n",
    "    \n",
    "    $x+y\\leq 7$\n",
    "    \n",
    "    $x+y\\geq 5$\n",
    "    \n",
    "    $x\\leq 4$\n",
    "    \n",
    "    $-y\\geq -4$\n",
    "   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pulp import *\n",
    "x=LpVariable(\"x\",0)\n",
    "y=LpVariable(\"y\",0)\n",
    "prob=LpProblem(\"ejemplo\",LpMinimize)\n",
    "prob += x+y <= 7\n",
    "prob += x+y >= 5\n",
    "prob += x <= 4\n",
    "prob += -y >= -4\n",
    "prob+=x+4*y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4.0, 1.0)"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "status=prob.solve()\n",
    "value(x), value(y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. maximizar $3x+4y$ sujeto a:\n",
    "\n",
    "    $x.y\\geq 0$\n",
    "    \n",
    "    $-x+y\\leq 2$\n",
    "    \n",
    "    $y\\leq 4$\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pulp import *\n",
    "x=LpVariable(\"x\",0)\n",
    "y=LpVariable(\"y\",0)\n",
    "prob=LpProblem(\"ejemplo\",LpMaximize)\n",
    "prob += -x+y <= 2\n",
    "prob += y <= 4\n",
    "prob+=3*x+4*y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2.0, 4.0)"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "status=prob.solve()\n",
    "value(x), value(y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. maximizar $-3x+y$ sujeto a:\n",
    "\n",
    "    $x.y\\geq 0$\n",
    "    \n",
    "    $-x+y\\leq 2$\n",
    "    \n",
    "    $y\\geq 4$\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pulp import *\n",
    "x=LpVariable(\"x\",0)\n",
    "y=LpVariable(\"y\",0)\n",
    "prob=LpProblem(\"ejemplo\",LpMaximize)\n",
    "prob += -x+y <= 2\n",
    "prob += y <= 4\n",
    "prob+=-3*x+y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.0, 2.0)"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "status=prob.solve()\n",
    "value(x), value(y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. maximizar $x-2y$ sujeto a:\n",
    "\n",
    "    $x.y\\geq 0$\n",
    "    \n",
    "    $x+2y\\leq 2$\n",
    "    \n",
    "    $-x-y\\leq -3$\n",
    "    \n",
    "   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pulp import *\n",
    "x=LpVariable(\"x\",0)\n",
    "y=LpVariable(\"y\",0)\n",
    "prob=LpProblem(\"ejemplo\",LpMaximize)\n",
    "prob += x+2*y <= 2\n",
    "prob += -x-y <= -3\n",
    "prob+=x-2*y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3.0, 0.0)"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "status=prob.solve()\n",
    "value(x), value(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
